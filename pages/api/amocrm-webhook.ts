// Next.js API route –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook –æ—Ç amoCRM
// –≠—Ç–æ—Ç endpoint –ø—Ä–∏–Ω–∏–º–∞–µ—Ç webhook –æ—Ç amoCRM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Inngest

import { NextApiRequest, NextApiResponse } from 'next';
import { Inngest } from 'inngest';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`üì• Received ${req.method} request to amocrm-webhook`);
  
  // –ü—Ä–∏–Ω–∏–º–∞–µ–º POST –∏ GET –∑–∞–ø—Ä–æ—Å—ã (amoCRM –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
  if (req.method !== 'POST' && req.method !== 'GET') {
    return res.status(405).json({ 
      error: 'Method not allowed',
      receivedMethod: req.method,
      allowedMethods: ['POST', 'GET']
    });
  }

  // –ï—Å–ª–∏ GET –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
  if (req.method === 'GET') {
    return res.status(200).json({
      message: 'amoCRM Webhook Endpoint',
      status: 'Ready',
      allowedMethods: ['POST', 'GET'],
      timestamp: new Date().toISOString()
    });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Inngest
    if (!process.env.INNGEST_EVENT_KEY) {
      throw new Error('Missing INNGEST_EVENT_KEY environment variable');
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ webhook –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"entity":{"action":{–º–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π —Å—É—â–Ω–æ—Å—Ç–∏}}}
    const webhookData = req.body;
    
    console.log('üì• Received amoCRM webhook (raw):', {
      headers: req.headers,
      body: webhookData,
      query: req.query
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã amoCRM webhook
    let parsedData = null;
    let entity = null;
    let action = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    if (typeof webhookData === 'object' && webhookData !== null) {
      // –ò—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É {"entity":{"action":{...}}}
      for (const [entityName, entityData] of Object.entries(webhookData)) {
        if (typeof entityData === 'object' && entityData !== null) {
          for (const [actionName, actionData] of Object.entries(entityData as Record<string, any>)) {
            if (Array.isArray(actionData) && actionData.length > 0) {
              entity = entityName;
              action = actionName;
              parsedData = actionData[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
              break;
            }
          }
        }
        if (parsedData) break;
      }
    }

    console.log('üìã Parsed webhook data:', {
      entity,
      action,
      parsedData,
      leadId: parsedData?.id,
      accountId: parsedData?.account_id,
      subdomain: 'oooprometei' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–¥–æ–º–µ–Ω
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    if (!parsedData || !parsedData.id) {
      throw new Error('Missing lead data in webhook');
    }

    // –°–æ–∑–¥–∞–µ–º Inngest –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const inngest = new Inngest({
      id: "prometei-ingest",
      eventKey: process.env.INNGEST_EVENT_KEY,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngest.send({
      name: 'amocrm/webhook',
      data: {
        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ webhook
        originalData: webhookData,
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        entity,
        action,
        leadData: parsedData,
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        parsedData: {
          subdomain: 'oooprometei',
          leadId: parsedData.id,
          accountId: parsedData.account_id,
          leadName: parsedData.name,
          leadPrice: parsedData.price,
          pipelineId: parsedData.pipeline_id,
          statusId: parsedData.status_id,
          oldPipelineId: parsedData.old_pipeline_id,
          oldStatusId: parsedData.old_status_id,
          responsibleUserId: parsedData.responsible_user_id,
          createdAt: parsedData.created_at,
          updatedAt: parsedData.updated_at,
        },
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        receivedAt: new Date().toISOString(),
        userAgent: req.headers['user-agent'],
        ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress
      }
    });

    console.log('‚úÖ amoCRM webhook event sent to Inngest');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç amoCRM
    return res.status(200).json({ 
      success: true, 
      message: 'Webhook received and processed',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Error processing amoCRM webhook:', error);
    
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
