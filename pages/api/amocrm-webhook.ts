// Next.js API route –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook –æ—Ç amoCRM
// –≠—Ç–æ—Ç endpoint –ø—Ä–∏–Ω–∏–º–∞–µ—Ç webhook –æ—Ç amoCRM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Inngest

import { NextApiRequest, NextApiResponse } from 'next';
import { Inngest } from 'inngest';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Inngest
    if (!process.env.INNGEST_EVENT_KEY) {
      throw new Error('Missing INNGEST_EVENT_KEY environment variable');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–¥–æ–º–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö webhook
    const subdomain = req.body?.data?.["account[subdomain]"]?.[0];
    const leadId = req.body?.data?.["leads[status][0][id]"]?.[0];
    const accountId = req.body?.data?.["account[id]"]?.[0];

    console.log('üì• Received amoCRM webhook:', {
      subdomain,
      leadId,
      accountId,
      webhookId: req.body?.id,
      headers: req.headers,
      body: req.body,
      query: req.query
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
    if (!subdomain) {
      throw new Error('Missing subdomain in webhook data');
    }
    if (!leadId) {
      throw new Error('Missing lead ID in webhook data');
    }

    // –°–æ–∑–¥–∞–µ–º Inngest –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const inngest = new Inngest({
      id: "prometei-ingest",
      eventKey: process.env.INNGEST_EVENT_KEY,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngest.send({
      name: 'amocrm/webhook',
      data: {
        // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç amoCRM
        ...req.body,
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        parsedData: {
          subdomain,
          leadId,
          accountId,
          pipelineId: req.body?.data?.["leads[status][0][pipeline_id]"]?.[0],
          statusId: req.body?.data?.["leads[status][0][status_id]"]?.[0],
          oldPipelineId: req.body?.data?.["leads[status][0][old_pipeline_id]"]?.[0],
          oldStatusId: req.body?.data?.["leads[status][0][old_status_id]"]?.[0],
        },
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        receivedAt: new Date().toISOString(),
        userAgent: req.headers['user-agent'],
        ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress
      }
    });

    console.log('‚úÖ amoCRM webhook event sent to Inngest');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç amoCRM
    return res.status(200).json({ 
      success: true, 
      message: 'Webhook received and processed',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Error processing amoCRM webhook:', error);
    
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
