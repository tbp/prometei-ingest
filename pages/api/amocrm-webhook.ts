// Next.js API route –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook –æ—Ç amoCRM
// –≠—Ç–æ—Ç endpoint –ø—Ä–∏–Ω–∏–º–∞–µ—Ç webhook –æ—Ç amoCRM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Inngest

import { NextApiRequest, NextApiResponse } from 'next';
import { Inngest } from 'inngest';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`üì• Received ${req.method} request to amocrm-webhook`);
  
  // –ü—Ä–∏–Ω–∏–º–∞–µ–º POST –∏ GET –∑–∞–ø—Ä–æ—Å—ã (amoCRM –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã)
  if (req.method !== 'POST' && req.method !== 'GET') {
    return res.status(405).json({ 
      error: 'Method not allowed',
      receivedMethod: req.method,
      allowedMethods: ['POST', 'GET']
    });
  }

  // –ï—Å–ª–∏ GET –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
  if (req.method === 'GET') {
    return res.status(200).json({
      message: 'amoCRM Webhook Endpoint',
      status: 'Ready',
      allowedMethods: ['POST', 'GET'],
      timestamp: new Date().toISOString()
    });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Inngest
    if (!process.env.INNGEST_EVENT_KEY) {
      throw new Error('Missing INNGEST_EVENT_KEY environment variable');
    }

    // amoCRM –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ URL-encoded form data
    const webhookData = req.body;
    
    console.log('üì• Received amoCRM webhook (raw):', {
      headers: req.headers,
      contentType: req.headers['content-type'],
      body: webhookData,
      query: req.query
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL-encoded —Ñ–æ—Ä–º–∞—Ç–∞
    const leadId = webhookData['leads[status][0][id]'];
    const statusId = webhookData['leads[status][0][status_id]'];
    const pipelineId = webhookData['leads[status][0][pipeline_id]'];
    const oldStatusId = webhookData['leads[status][0][old_status_id]'];
    const oldPipelineId = webhookData['leads[status][0][old_pipeline_id]'];
    const accountId = webhookData['account[id]'];
    const subdomain = webhookData['account[subdomain]'];

    console.log('üìã Parsed webhook data:', {
      leadId,
      statusId,
      pipelineId,
      oldStatusId,
      oldPipelineId,
      accountId,
      subdomain
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!leadId) {
      throw new Error('Missing lead ID in webhook data');
    }
    if (!subdomain) {
      throw new Error('Missing subdomain in webhook data');
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const parsedData = {
      leadId: parseInt(leadId),
      statusId: parseInt(statusId),
      pipelineId: parseInt(pipelineId),
      oldStatusId: oldStatusId ? parseInt(oldStatusId) : null,
      oldPipelineId: oldPipelineId ? parseInt(oldPipelineId) : null,
      accountId: parseInt(accountId),
      subdomain: subdomain,
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è
      statusChanged: statusId !== oldStatusId,
      pipelineChanged: pipelineId !== oldPipelineId
    };

    // –°–æ–∑–¥–∞–µ–º Inngest –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    const inngest = new Inngest({
      id: "prometei-ingest",
      eventKey: process.env.INNGEST_EVENT_KEY,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await inngest.send({
      name: 'amocrm/webhook',
      data: {
        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ webhook
        originalData: webhookData,
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        entity: 'leads',
        action: 'status_change',
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        parsedData: parsedData,
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        receivedAt: new Date().toISOString(),
        userAgent: req.headers['user-agent'],
        ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress,
        
        // –§–ª–∞–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        changes: {
          statusChanged: parsedData.statusChanged,
          pipelineChanged: parsedData.pipelineChanged
        }
      }
    });

    console.log('‚úÖ amoCRM webhook event sent to Inngest');

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç amoCRM
    return res.status(200).json({ 
      success: true, 
      message: 'Webhook received and processed',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Error processing amoCRM webhook:', error);
    
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
