#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ amoCRM webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π webhook –æ—Ç amoCRM
 */

require('dotenv').config();

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ amoCRM webhook —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
async function testAmoCrmWebhookIntegration(endpoint = "http://localhost:3000/api/inngest") {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ amoCRM webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...");
  console.log("üì° URL:", endpoint);

  // –†–µ–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ webhook –æ—Ç amoCRM
  const amoCrmWebhookData = {
    name: "amocrm/webhook",
    data: {
      data: {
        "account[id]": ["32452514"],
        "account[subdomain]": ["oooprometei"],
        "leads[status][0][id]": ["45721053"], // ID —Å–¥–µ–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        "leads[status][0][old_pipeline_id]": ["9679730"],
        "leads[status][0][old_status_id]": ["77186754"],
        "leads[status][0][pipeline_id]": ["9679730"],
        "leads[status][0][status_id]": ["77186758"]
      },
      id: "01K3V7Q0QYTEM0DMCF9P1SWYTB",
      name: "webhook/request.received",
      ts: Date.now(),
      v: null
    }
  };

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º amoCRM webhook:");
  console.log(JSON.stringify(amoCrmWebhookData, null, 2));
  console.log("");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const requiredAmoCrmEnvs = [
    'AMOCRM_CLIENT_ID', 
    'AMOCRM_CLIENT_SECRET', 
    'AMOCRM_REDIRECT_URI', 
    'AMOCRM_REFRESH_TOKEN', 
    'AMOCRM_SUBDOMAIN'
  ];
  
  const requiredErpEnvs = [
    'CRM_API_URL', 
    'CRM_API_KEY', 
    'CRM_API_USERNAME', 
    'CRM_API_PASSWORD'
  ];

  const missingAmoCrmEnvs = requiredAmoCrmEnvs.filter(env => !process.env[env]);
  const missingErpEnvs = requiredErpEnvs.filter(env => !process.env[env]);

  if (missingAmoCrmEnvs.length > 0) {
    console.log("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ amoCRM:", missingAmoCrmEnvs);
    console.log("üîß –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ .env —Ñ–∞–π–ª");
  }

  if (missingErpEnvs.length > 0) {
    console.log("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ERP:", missingErpEnvs);
    console.log("üîß –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ .env —Ñ–∞–π–ª");
  }

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'amoCRM-webhook/2.0'
      },
      body: JSON.stringify(amoCrmWebhookData)
    });

    const responseText = await response.text();
    let responseData;
    
    try {
      responseData = JSON.parse(responseText);
    } catch {
      responseData = responseText;
    }

    console.log("üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:");
    console.log("Status:", response.status);
    console.log("Body:", responseData);

    if (response.ok) {
      console.log("‚úÖ amoCRM webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!");
      console.log("üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Inngest Dashboard –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
      console.log("");
      console.log("üìã –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å:");
      console.log("1. ‚úÖ Webhook –ø–æ–ª—É—á–µ–Ω");
      console.log("2. üîÑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ amoCRM API");
      console.log("3. üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏ –ø–æ ID: 45721053");
      console.log("4. üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ ERP —Å–∏—Å—Ç–µ–º–µ");
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook");
    }

    return { status: response.status, data: responseData };

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook:", error.message);
    console.log("");
    console.log("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:");
    console.log("1. –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run dev");
    console.log("2. Inngest dev —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run inngest");
    console.log("3. API endpoint –¥–æ—Å—Ç—É–ø–µ–Ω:", endpoint);
    console.log("4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ ID —Å–¥–µ–ª–æ–∫
 */
async function testDifferentLeadIds(endpoint = "http://localhost:3000/api/inngest") {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ ID —Å–¥–µ–ª–æ–∫...\n");

  const testLeadIds = ["45721053", "12345678", "87654321"];

  for (const leadId of testLeadIds) {
    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º Lead ID: ${leadId}`);
    console.log("-".repeat(40));
    
    const webhookData = {
      name: "amocrm/webhook",
      data: {
        data: {
          "account[id]": ["32452514"],
          "account[subdomain]": ["oooprometei"],
          "leads[status][0][id]": [leadId],
          "leads[status][0][pipeline_id]": ["9679730"],
          "leads[status][0][status_id]": ["77186758"]
        },
        id: `test_${leadId}_${Date.now()}`,
        name: "webhook/request.received",
        ts: Date.now(),
        v: null
      }
    };
    
    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(webhookData)
      });
      
      console.log(`‚úÖ Lead ID ${leadId}: ${response.status}`);
    } catch (error) {
      console.log(`‚ùå Lead ID ${leadId}: ${error.message}`);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");
}

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
async function main() {
  const command = process.argv[2];
  const endpoint = process.argv[3] || "http://localhost:3000/api/inngest";

  try {
    switch (command) {
      case "multiple":
        await testDifferentLeadIds(endpoint);
        break;
      default:
        console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        console.log("node scripts/test-amocrm-webhook.js [endpoint]     - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç");
        console.log("node scripts/test-amocrm-webhook.js multiple [endpoint] - —Ç–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ ID");
        console.log("");
        console.log("üí° –ü—Ä–∏–º–µ—Ä—ã:");
        console.log("node scripts/test-amocrm-webhook.js");
        console.log("node scripts/test-amocrm-webhook.js multiple");
        console.log("");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        await testAmoCrmWebhookIntegration(endpoint);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º CLI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  testAmoCrmWebhookIntegration,
  testDifferentLeadIds
};
