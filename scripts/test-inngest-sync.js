#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Inngest
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Inngest API –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏–π
 */

require('dotenv').config();

async function testInngestSync() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Inngest...");
  
  const endpoint = "https://prometei-ingest.iq-project.ru/api/inngest";
  
  // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è amoCRM webhook
  const testEvent = {
    name: "amocrm/webhook",
    data: {
      data: {
        "account[id]": ["32452514"],
        "account[subdomain]": ["oooprometei"],
        "leads[status][0][id]": ["45721053"],
        "leads[status][0][old_pipeline_id]": ["9679730"],
        "leads[status][0][old_status_id]": ["77186754"],
        "leads[status][0][pipeline_id]": ["9679730"],
        "leads[status][0][status_id]": ["77186758"]
      },
      id: "test_" + Date.now(),
      name: "webhook/request.received",
      ts: Date.now(),
      v: null
    }
  };

  console.log("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:");
  console.log("URL:", endpoint);
  console.log("Event:", JSON.stringify(testEvent, null, 2));

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Inngest-Test/1.0'
      },
      body: JSON.stringify(testEvent)
    });

    const responseText = await response.text();
    let responseData;

    try {
      responseData = JSON.parse(responseText);
    } catch {
      responseData = responseText;
    }

    console.log("üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:");
    console.log("Status:", response.status);
    console.log("Response:", responseData);

    if (response.ok) {
      console.log("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Inngest —Ä–∞–±–æ—Ç–∞–µ—Ç!");
      console.log("üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Inngest Dashboard –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
      console.log("üìã Dashboard: https://app.inngest.com/");
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Inngest");
      console.log("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Inngest");
    }

    return response.ok;

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Inngest:", error.message);
    console.log("");
    console.log("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
    console.log("1. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    console.log("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è INNGEST_*");
    console.log("3. –ü—Ä–æ–±–ª–µ–º—ã —Å DNS –∏–ª–∏ —Å–µ—Ç—å—é");
    console.log("4. Inngest endpoint –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
    
    return false;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ERP –∑–∞–¥–∞—á–∏
 */
async function testDirectErpTaskCreation() {
  console.log("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ERP –∑–∞–¥–∞—á–∏...");
  
  const endpoint = "https://prometei-ingest.iq-project.ru/api/inngest";
  
  const testEvent = {
    name: "erp/task.create",
    data: {
      dealName: "–¢–µ—Å—Ç–æ–≤–∞—è ERP –∑–∞–¥–∞—á–∞ –∏–∑ Inngest",
      amount: 12500,
      entityId: 70
    }
  };

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è ERP –∑–∞–¥–∞—á–∏:");
  console.log(JSON.stringify(testEvent, null, 2));

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Inngest-Test/1.0'
      },
      body: JSON.stringify(testEvent)
    });

    const responseData = await response.json();

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    console.log("Status:", response.status);
    console.log("Response:", responseData);

    if (response.ok) {
      console.log("‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ERP –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ERP –∑–∞–¥–∞—á–∏");
    }

    return response.ok;

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    return false;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Inngest –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");
  console.log("=" .repeat(50));
  
  const test1 = await testInngestSync();
  const test2 = await testDirectErpTaskCreation();
  
  console.log("\nüéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
  console.log("amoCRM Webhook:", test1 ? "‚úÖ PASSED" : "‚ùå FAILED");
  console.log("Direct ERP Task Creation:", test2 ? "‚úÖ PASSED" : "‚ùå FAILED");
  
  if (test1 && test2) {
    console.log("\nüöÄ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! Inngest –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");
    console.log("üìã –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –≤ amoCRM –Ω–∞:");
    console.log("   https://prometei-ingest.iq-project.ru/api/amocrm-webhook");
  } else {
    console.log("\nüîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testInngestSync,
  testDirectErpTaskCreation
};
