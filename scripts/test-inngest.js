#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest —Ñ—É–Ω–∫—Ü–∏–π
 * –ó–∞–º–µ–Ω—è–µ—Ç test-crm-request.js –¥–ª—è Trigger.dev
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/test-inngest.js [command] [args...]
 */

const { Inngest } = require("inngest");

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Inngest –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
const inngest = new Inngest({ 
  id: "prometei-flow-test",
  name: "Test Client"
});

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏
 */
async function testCreateDeal(dealName = "Test Deal", amount = 5000, entityId = 70) {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è CRM —Å–¥–µ–ª–∫–∏...");
  
  const payload = {
    dealName,
    amount: parseInt(amount),
    entityId: parseInt(entityId)
  };

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(payload, null, 2));

  try {
    const result = await inngest.send({
      name: "crm/create-deal",
      data: payload
    });

    console.log("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:", result);
    console.log("üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Inngest Dashboard –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
    
    return result;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–±—ã—Ç–∏—è:", error.message);
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –æ—Ç amoCRM
 */
async function testAmoCrmWebhook() {
  console.log("üè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ amoCRM webhook...");
  
  const webhookPayload = {
    type: "lead_created",
    body: {
      id: 12345,
      name: "–°–¥–µ–ª–∫–∞ –æ—Ç amoCRM Webhook",
      price: 25000,
      entity_id: 70,
      contact_email: "test@amocrm.com",
      contact_phone: "+7 (999) 123-45-67"
    },
    headers: {
      "user-agent": "amoCRM-webhook/1.0"
    },
    timestamp: new Date().toISOString()
  };

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(webhookPayload, null, 2));

  try {
    const result = await inngest.send({
      name: "amocrm/webhook",
      data: webhookPayload
    });

    console.log("‚úÖ Webhook —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", result);
    return result;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook:", error.message);
    throw error;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
 */
async function testBatchCreate() {
  console.log("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫...");
  
  const batchPayload = {
    deals: [
      { dealName: "–ü–∞–∫–µ—Ç–Ω–∞—è —Å–¥–µ–ª–∫–∞ 1", amount: 10000, entityId: 70 },
      { dealName: "–ü–∞–∫–µ—Ç–Ω–∞—è —Å–¥–µ–ª–∫–∞ 2", amount: 15000, entityId: 70 },
      { dealName: "–ü–∞–∫–µ—Ç–Ω–∞—è —Å–¥–µ–ª–∫–∞ 3", amount: 20000, entityId: 70 }
    ]
  };

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç —Å–¥–µ–ª–æ–∫:", JSON.stringify(batchPayload, null, 2));

  try {
    const result = await inngest.send({
      name: "crm/batch-create-deals",
      data: batchPayload
    });

    console.log("‚úÖ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", result);
    return result;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞–∫–µ—Ç–∞:", error.message);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Inngest API endpoint
 */
async function testHttpEndpoint(endpoint = "http://localhost:3000/api/inngest") {
  console.log("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP endpoint...");
  console.log("üì° URL:", endpoint);

  const testData = {
    name: "crm/create-deal",
    data: {
      dealName: "HTTP Test Deal",
      amount: 7500,
      entityId: 70
    }
  };

  console.log("üì§ HTTP –∑–∞–ø—Ä–æ—Å:", JSON.stringify(testData, null, 2));

  try {
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    });

    const responseText = await response.text();
    
    console.log("üìä HTTP –æ—Ç–≤–µ—Ç:");
    console.log("Status:", response.status);
    console.log("Body:", responseText);

    if (response.ok) {
      console.log("‚úÖ HTTP –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!");
    } else {
      console.log("‚ùå HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω");
    }

    return { status: response.status, body: responseText };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:", error.message);
    throw error;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runAllTests() {
  console.log("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Inngest...\n");
  
  const tests = [
    { name: "Create Deal", fn: () => testCreateDeal() },
    { name: "amoCRM Webhook", fn: () => testAmoCrmWebhook() },
    { name: "Batch Create", fn: () => testBatchCreate() },
    { name: "HTTP Endpoint", fn: () => testHttpEndpoint() }
  ];

  for (const test of tests) {
    console.log(`\nüìã –¢–µ—Å—Ç: ${test.name}`);
    console.log("=".repeat(50));
    
    try {
      await test.fn();
      console.log(`‚úÖ ${test.name}: PASSED`);
    } catch (error) {
      console.log(`‚ùå ${test.name}: FAILED - ${error.message}`);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
  console.log("üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Inngest Dashboard: https://app.inngest.com");
}

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
async function main() {
  const command = process.argv[2];
  const args = process.argv.slice(3);

  try {
    switch (command) {
      case "create":
        await testCreateDeal(args[0], args[1], args[2]);
        break;
      case "webhook":
        await testAmoCrmWebhook();
        break;
      case "batch":
        await testBatchCreate();
        break;
      case "http":
        await testHttpEndpoint(args[0]);
        break;
      case "all":
        await runAllTests();
        break;
      default:
        console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        console.log("node scripts/test-inngest.js create [dealName] [amount] [entityId]");
        console.log("node scripts/test-inngest.js webhook");
        console.log("node scripts/test-inngest.js batch");
        console.log("node scripts/test-inngest.js http [endpoint]");
        console.log("node scripts/test-inngest.js all");
        console.log("");
        console.log("üí° –ü—Ä–∏–º–µ—Ä—ã:");
        console.log('node scripts/test-inngest.js create "–¢–µ—Å—Ç —Å–¥–µ–ª–∫–∞" 15000 70');
        console.log("node scripts/test-inngest.js webhook");
        console.log("node scripts/test-inngest.js all");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await testCreateDeal();
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º CLI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  testCreateDeal,
  testAmoCrmWebhook,
  testBatchCreate,
  testHttpEndpoint,
  runAllTests
};
