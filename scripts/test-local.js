#!/usr/bin/env node

/**
 * –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ Inngest API
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ executeCreateCrmDeal —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
 */

require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
const path = require('path');
const { execSync } = require('child_process');

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ executeCreateCrmDeal —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
 */
async function testExecuteCreateCrmDeal() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ executeCreateCrmDeal —Ñ—É–Ω–∫—Ü–∏–∏...");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const requiredEnvs = ['CRM_API_URL', 'CRM_API_KEY', 'CRM_API_USERNAME', 'CRM_API_PASSWORD'];
  const missingEnvs = requiredEnvs.filter(env => !process.env[env]);
  
  if (missingEnvs.length > 0) {
    console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", missingEnvs);
    return false;
  }

  console.log("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
  console.log("üìã CRM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");
  console.log("   URL:", process.env.CRM_API_URL);
  console.log("   Username:", process.env.CRM_API_USERNAME);
  console.log("   API Key:", process.env.CRM_API_KEY ? "***—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω***" : "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  console.log("");

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testPayload = {
    dealName: "–¢–µ—Å—Ç–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞",
    amount: 7500,
    entityId: 70
  };

  console.log("üì§ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(testPayload, null, 2));

  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é executeCreateCrmDeal
    const body = {
      key: process.env.CRM_API_KEY,
      username: process.env.CRM_API_USERNAME,
      password: process.env.CRM_API_PASSWORD,
      action: "insert",
      entity_id: testPayload.entityId,
      items: {
        field_1039: testPayload.dealName,
        ...(testPayload.amount !== undefined ? { field_1040: testPayload.amount } : {}),
      },
    };

    console.log("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ CRM API...");
    console.log("üì° URL:", process.env.CRM_API_URL);
    console.log("üì¶ Payload:", JSON.stringify(body, null, 2));

    const response = await fetch(process.env.CRM_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });

    const text = await response.text();
    let json;
    try {
      json = JSON.parse(text);
    } catch {
      json = text;
    }

    console.log("üìä –û—Ç–≤–µ—Ç CRM API:");
    console.log("   Status:", response.status);
    console.log("   Response:", json);

    if (response.ok) {
      console.log("‚úÖ CRM API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!");
      return true;
    } else {
      console.log("‚ùå CRM API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:", response.status);
      return false;
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ CRM API:", error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript
 */
async function testTypeScriptCompilation() {
  console.log("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏...");
  
  try {
    execSync('npx tsc --noEmit', { 
      stdio: 'pipe',
      cwd: process.cwd()
    });
    console.log("‚úÖ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∏ TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:");
    console.error(error.stdout?.toString() || error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
 */
function testProjectStructure() {
  console.log("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...");
  
  const requiredFiles = [
    'src/inngest/client.ts',
    'src/inngest/functions/createCrmDeal.ts',
    'pages/api/inngest.ts',
    'package.json',
    'tsconfig.json'
  ];

  const fs = require('fs');
  const missingFiles = requiredFiles.filter(file => !fs.existsSync(file));
  
  if (missingFiles.length > 0) {
    console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:", missingFiles);
    return false;
  }

  console.log("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç");
  return true;
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runAllTests() {
  console.log("üß™ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Inngest –ø—Ä–æ–µ–∫—Ç–∞...\n");
  
  const tests = [
    { name: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", fn: testProjectStructure },
    { name: "TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è", fn: testTypeScriptCompilation },
    { name: "CRM API —Ñ—É–Ω–∫—Ü–∏—è", fn: testExecuteCreateCrmDeal }
  ];

  let allPassed = true;

  for (const test of tests) {
    console.log(`üìã –¢–µ—Å—Ç: ${test.name}`);
    console.log("=".repeat(50));
    
    try {
      const result = await test.fn();
      if (result) {
        console.log(`‚úÖ ${test.name}: PASSED`);
      } else {
        console.log(`‚ùå ${test.name}: FAILED`);
        allPassed = false;
      }
    } catch (error) {
      console.log(`‚ùå ${test.name}: ERROR - ${error.message}`);
      allPassed = false;
    }
    
    console.log("");
  }

  console.log("üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:");
  if (allPassed) {
    console.log("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
    console.log("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Inngest");
  } else {
    console.log("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏");
    console.log("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º");
  }

  return allPassed;
}

/**
 * CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */
async function main() {
  const command = process.argv[2];

  try {
    switch (command) {
      case "crm":
        await testExecuteCreateCrmDeal();
        break;
      case "compile":
        await testTypeScriptCompilation();
        break;
      case "structure":
        testProjectStructure();
        break;
      default:
        console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        console.log("node scripts/test-local.js crm       - —Ç–µ—Å—Ç CRM API");
        console.log("node scripts/test-local.js compile   - —Ç–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏");
        console.log("node scripts/test-local.js structure - —Ç–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã");
        console.log("node scripts/test-local.js           - –≤—Å–µ —Ç–µ—Å—Ç—ã");
        console.log("");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const success = await runAllTests();
        process.exit(success ? 0 : 1);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º CLI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  testExecuteCreateCrmDeal,
  testTypeScriptCompilation,
  testProjectStructure,
  runAllTests
};
